package components

import (
	"github.com/kaje94/slek-link/internal/config"
	"github.com/kaje94/slek-link/internal/utils"
	"github.com/labstack/echo/v4"
	"net/url"
	"strings"
	"unicode"
)

templ Navbar(c echo.Context) {
	{{ userInfo := utils.GetUserFromCtx(c) }}
	{{ showShadow := utils.GetPathFromCtx(c) != "/" }}
	{{ showDashboardBtn := !strings.HasPrefix(utils.GetPathFromCtx(c), "/dashboard") }}
	{{ logoutWithOriginalUrl := "/logout?originalURL=" + url.QueryEscape(c.Request().URL.String()) }}
	<div class={ "navbar rounded-full", templ.KV("shadow-md", showShadow) }>
		<div class="flex-1">
			<a class="btn btn-ghost text-xl" href="/">
				<span class="flex gap-0.5">
					<span class="bg-gradient-to-r from-primary to-secondary bg-clip-text text-transparent">
						slek
					</span>
					<span class="text-accent font-extrabold">.</span>
					<span class="font-thin italic">link</span>
				</span>
			</a>
		</div>
		<div class="flex-none flex gap-2 items-center">
			if userInfo.Email == "" {
				<a href="/dashboard" class="btn btn-outline flex items-center gap-3 px-5 bg-base-300 border-base-content border-opacity-75">
					if (config.Config.WebAppConfig.GoogleClientId != "" && config.Config.WebAppConfig.GoogleClientSecret != "") {
						<span class="w-5 h-5 ">
							@GoogleIcon()
						</span>
					}
					<span class="pt-0.5 font-medium">Sign In</span>
				</a>
			} else {
				if showDashboardBtn {
					<a class="btn btn-md h-8 btn-secondary" href="/dashboard">Dashboard</a>
				}
				<div class="dropdown dropdown-end">
					<div class="h-full flex items-center">
						<div
							tabindex="0"
							role="button"
							class="btn btn-ghost btn-circle avatar content-center my-0"
						>
							if userInfo.Picture == "" {
								<span class="w-12 h-12 rounded-full border-[1px] content-center text-base display-font border-base-content">{ generateInitialsFromName(userInfo.Name) }</span>
							} else {
								<div class="w-12 rounded-full border-[1px] border-accent">
									<img alt={ userInfo.Name } data-src={ userInfo.Picture } data-fallback-src="images/default-user.svg" class="w-12 h-12" loading="lazy" height="48" width="48"/>
								</div>
							}
						</div>
					</div>
					<ul
						tabindex="0"
						class="menu dropdown-content bg-base-300 rounded-box z-[1] mt-1  w-52 p-2 shadow-2xl rounded-tr-none"
					>
						<li class="disabled"><a>{ userInfo.Name }</a></li>
						<li>
							<a href={ templ.SafeURL(logoutWithOriginalUrl) }>Sign Out</a>
						</li>
					</ul>
				</div>
			}
		</div>
	</div>
}

func generateInitialsFromName(name string) string {
	if name == "" {
		return ""
	}

	words := strings.FieldsFunc(name, func(r rune) bool {
		return unicode.IsSpace(r) || r == '.'
	})

	initials := ""
	for _, word := range words {
		if len(initials) < 2 && len(word) > 0 && unicode.IsUpper(rune(word[0])) {
			initials += string(word[0])
		}
	}

	return initials
}
