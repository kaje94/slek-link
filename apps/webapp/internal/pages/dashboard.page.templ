package pages

import (
	"fmt"
	"github.com/dustin/go-humanize"
	"github.com/kaje94/slek-link/internal/components"
	"github.com/kaje94/slek-link/internal/models"
	"github.com/kaje94/slek-link/internal/utils"
	"github.com/labstack/echo/v4"
	"net/http"
	"slices"
)

func HandleDashboardsPage(c echo.Context) error {
	userInfo, err := utils.GetUserFromCtxWithRedirect(c)
	if err != nil {
		return err
	}

	db, err := utils.GetDbFromCtx(c)
	if err != nil {
		return err
	}

	compat, err := utils.GetValkeyFromCtx(c)
	if err != nil {
		return err
	}

	links, err := utils.GetLinksOfUser(compat, db, userInfo.ID)
	if err != nil {
		return echo.NewHTTPError(http.StatusInternalServerError, "Failed to find links")
	}

	slices.Reverse(links)

	resp := components.RootLayout(
		"Dashboard | slek.link - Manage and Track Your Links",
		"Access your slek.link dashboard to view, manage, and track the performance of your shortened links. Simplify your workflow with powerful link analytics and easy link management tools.",
		dashboardBodyContent(c, links),
	)
	c.Response().Header().Set(echo.HeaderContentType, echo.MIMETextHTML)
	return resp.Render(c.Request().Context(), c.Response().Writer)
}

templ dashboardBodyContent(c echo.Context, links []models.Link) {
	@components.LayoutWithSignals(c, "{ searchInput:'', linkModalOpen:false, linkModalError:'', mutating: false, editLinkId:'', deleteLinkId: '', name: '', shortCode:'', url:'', description:'' }") {
		@components.BreadCrumb([]components.BreadcrumbItem{
			components.BreadcrumbItem{Label: "Home", Link: "/"},
			components.BreadcrumbItem{Label: "Dashboard", Link: ""},
		})
		<div id="dashboard-content-wrap" class="flex-1 flex flex-col">
			if len(links)== 0 {
				@DashboardEmpty()
			} else {
				@DashboardWithContent(c, links)
			}
		</div>
		@components.LinkModal(c, false)
		@components.DeleteLinkConfirmModal(c, false)
	}
}

templ DashboardEmpty() {
	<div class="flex-1 flex flex-col">
		<div class="flex flex-col flex-1 items-center justify-center">
			<div class="max-w-lg h-full flex flex-col gap-4 justify-center items-center">
				<div class="opacity-50">
					@components.EmptyIllustration()
				</div>
				<h3 class="text-center w-4/5 mt-10 opacity-80">
					You have not yet created any short links. Get started by shortening
					your first long URL.
				</h3>
				<button class="btn btn-primary w-3/5" data-on-click="$linkModalOpen=true">Shorten new Link</button>
			</div>
		</div>
	</div>
}

templ DashboardNoMatchingItems() {
	<div class="flex-1 flex flex-col" id="dashboard-items">
		<div class="flex flex-col flex-1 items-center justify-center">
			<div class="max-w-lg h-full flex flex-col gap-4 justify-center items-center">
				<div class="opacity-80">
					@components.MatchNotFoundIllustration()
				</div>
				<h3 class="text-center w-4/5 mt-10 opacity-80">
					No search results found
				</h3>
			</div>
		</div>
	</div>
}

templ listItemCol(label string, value string, index int) {
	<div class={ "flex gap-1 line-clamp-1 h-6 break-all", templ.KV("justify-end text-right md:justify-start md:text-left", index % 2 == 1) }>
		<span class={ "md:hidden block font-extralight", templ.KV("text-right md:text-left", index % 2 == 1) }>
			{ label }:
		</span>
		{ value }
	</div>
}

templ DashboardWithContent(c echo.Context, links []models.Link) {
	<div class="flex justify-between flex-col sm:flex-row-reverse gap-4">
		<button class="btn btn-primary" data-on-click="$linkModalOpen=true">
			Shorten new Link
		</button>
		<label class="input input-bordered flex items-center gap-2">
			<input
				type="text"
				class="grow"
				placeholder="Search..."
				data-bind-searchInput
				data-indicator-searching
				data-on-input__debounce.1000ms={ fmt.Sprintf("@post('/api/dashboard-search',{headers:{'x-csrf-token': '%s'}})", utils.GetCSRFTokenFromCtx(c)) }
			/>
			<span class="loading loading-ring" data-show="$searching"></span>
			<span data-show="!$searching">
				@components.SearchIcon()
			</span>
		</label>
	</div>
	@DashboardItems(links)
}

templ DashboardItems(links []models.Link) {
	<div class="bg-base-content bg-opacity-10 flex flex-col gap-[1px] my-2" id="dashboard-items">
		<div class="md:grid grid-cols-2 md:grid-cols-5 py-2 px-2 md:px-4 gap-2 font-extralight bg-base-100 hidden">
			<div>Name</div>
			<div>Created</div>
			<div>State</div>
			<div>Slug</div>
		</div>
		for _, item := range links {
			@DashboardItem(item)
		}
	</div>
}

templ DashboardItem(item models.Link) {
	<a
		href={ templ.SafeURL(fmt.Sprintf("/dashboard/%s", item.ID)) }
		id={ fmt.Sprintf("link-item-%s", item.ID) }
		class="grid grid-cols-2 md:grid-cols-5 py-2 px-2 md:px-4 gap-2 hover:bg-base-200 duration-200 cursor-pointer bg-base-100 line-clamp-1 items-center overflow-visible"
	>
		@listItemCol("Name", item.Name, 0)
		@listItemCol("Created", humanize.Time(item.CreatedAt), 1)
		@listItemCol("State", string(item.Status), 2)
		@listItemCol("Slug", item.ShortCode, 3)
		<div class="flex justify-end items-center gap-0.5 col-span-full md:col-span-1 order-first md:order-none">
			<button
				title="Edit Link"
				class="btn hover:btn-accent btn-sm  px-1 md:px-3 opacity-50 hover:opacity-100"
				data-on-click__stop__prevent={ fmt.Sprintf("$linkModalOpen=true;$editLinkId='%s';$name='%s';$shortCode='%s';$url='%s';$description='%s'", item.ID, item.Name, item.ShortCode, item.LongURL, item.Description) }
			>
				<span class="hidden md:block">Edit</span>
				@components.EditIcon()
			</button>
			<button title="Delete Link" class="btn hover:btn-error btn-sm  px-1 md:px-3 opacity-50 hover:opacity-100" data-on-click__stop__prevent={ fmt.Sprintf("$deleteLinkId='%s'", item.ID) }>
				<span class="hidden md:block">Delete</span>
				@components.TrashIcon()
			</button>
		</div>
	</a>
}
