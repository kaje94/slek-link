package pages

import (
	"fmt"
	"github.com/dustin/go-humanize"
	gormModels "github.com/kaje94/slek-link/gorm/pkg"
	"github.com/kaje94/slek-link/webapp/internal/components"
	"github.com/kaje94/slek-link/webapp/internal/config"
	"github.com/kaje94/slek-link/webapp/internal/utils"
	"github.com/labstack/echo/v4"
	"net/http"
	"slices"
	"strconv"
	"strings"
	"time"
)

func GetTotalAndCurrentMonthClicks(monthlyClicks []gormModels.LinkMonthlyClicks) (gormModels.LinkMonthlyClicks, int) {
	totalClicks := 0
	var currentMonth gormModels.LinkMonthlyClicks
	for _, item := range monthlyClicks {
		if item.Month == int(time.Now().Month()) && item.Year == time.Now().Year() {
			currentMonth = item
			break
		}
	}
	for _, item := range monthlyClicks {
		totalClicks += item.Count
	}
	return currentMonth, totalClicks
}

func FormatMonthlyClicks(linkId string, monthlyClicks []gormModels.LinkMonthlyClicks) []gormModels.LinkMonthlyClicks {
	monthlyClicksUpdated := []gormModels.LinkMonthlyClicks{}
	for i := 0; i < len(monthlyClicks); i++ {
		pastMonthTime := time.Now().AddDate(0, -i, 0)
		pastMonth := int(pastMonthTime.Month())
		pastMonthYear := pastMonthTime.Year()
		found := false
		for _, item := range monthlyClicks {
			if item.Month == pastMonth && item.Year == pastMonthYear {
				found = true
				monthlyClicksUpdated = append(monthlyClicksUpdated, item)
				break
			}
		}

		if !found {
			monthlyClicksUpdated = append(monthlyClicksUpdated, gormModels.LinkMonthlyClicks{
				LinkID: linkId,
				Year:   pastMonthYear,
				Month:  int(pastMonth),
				Count:  0,
			})
		}
	}
	slices.Reverse(monthlyClicksUpdated)
	return monthlyClicksUpdated
}

func HandleLinkDetailsPage(c echo.Context) error {
	userInfo, err := utils.GetUserFromCtxWithRedirect(c)
	if err != nil {
		return err
	}

	id := c.Param("id")
	if id == "" {
		return echo.NewHTTPError(http.StatusBadRequest, "Id is required")
	}

	compat, err := utils.GetValkeyFromCtx(c)
	if err != nil {
		return err
	}

	var link gormModels.Link
	utils.GetUserLinkCache(compat, userInfo.ID, id, &link)

	var monthlyClicks []gormModels.LinkMonthlyClicks
	utils.GetMonthlyClicksCache(compat, id, &monthlyClicks)
	if monthlyClicks != nil {
		monthlyClicks = FormatMonthlyClicks(id, monthlyClicks)
	}

	currentMonth, totalClicks := GetTotalAndCurrentMonthClicks(monthlyClicks)

	var countryClicks []gormModels.LinkCountryClicks
	utils.GetCountryClicksCache(compat, id, &countryClicks)

	isNewLinkStr := c.QueryParam("isNewLink")
	isNewLink, _ := strconv.ParseBool(isNewLinkStr)

	///
	divStr := fmt.Sprintf("sdsd %f", float32(1)/float32(8))
	fmt.Println(divStr)

	resp := components.RootLayout(
		"Link Details | slek.link - Track and Analyze Your Link's Performance",
		"Dive into detailed analytics for your shortened link on slek.link. Monitor clicks, track user behavior, and gain insights to optimize your link's performance.",
		linkDetailsBodyContent(c, id, link, currentMonth, totalClicks, isNewLink, monthlyClicks, countryClicks),
	)
	c.Response().Header().Set(echo.HeaderContentType, echo.MIMETextHTML)
	return resp.Render(c.Request().Context(), c.Response().Writer)
}

templ linkDetailsBodyContent(c echo.Context, linkId string, link gormModels.Link, currentMonth gormModels.LinkMonthlyClicks, totalClicks int, showNewLinkBanner bool, monthlyClicks []gormModels.LinkMonthlyClicks, countryClicks []gormModels.LinkCountryClicks) {
	{{ isLoadingLink := link.ID == "" }}
	{{ timeAgoStr := "" }}
	{{ totalClicksStr := "" }}
	{{ currentMonthClicksStr := "" }}
	{{ pathMonthText := "Past 12 months" }}
	{{ clicksSubText := "Clicks over time" }}
	if link.ID !="" {
		{{ timeAgoStr = humanize.Time(link.CreatedAt) }}
		{{ totalClicksStr = humanize.Comma(int64(totalClicks)) }}
		{{ currentMonthClicksStr = humanize.Comma(int64(currentMonth.Count)) }}
		if len(monthlyClicks)>1 {
			{{ pathMonthText = fmt.Sprintf("Past %d months", len(monthlyClicks)) }}
			{{ clicksSubText = fmt.Sprintf("Clicks over the past %d months", len(monthlyClicks)) }}
		} else if len(monthlyClicks)>0 {
			{{ pathMonthText = "Past month" }}
			{{ clicksSubText = "Clicks over past month" }}
		}
	}
	@components.LayoutWithSignals(c, "{ linkModalOpen:false, linkModalError:'', mutating: false, editLinkId:'', deleteLinkId: '', name: '', shortCode:'', url:'', description:'' }") {
		@components.BreadCrumb([]components.BreadcrumbItem{
			components.BreadcrumbItem{Label: "Home", Link: "/"},
			components.BreadcrumbItem{Label: "Dashboard", Link: "/dashboard"},
			components.BreadcrumbItem{Label: "Link Details", Link: ""},
		})
		if link.ID!="" && showNewLinkBanner {
			<div role="alert" class="alert alert-success">
				@components.InfoIcon()
				<p>
					Your link has been shortened. To share, use:
					<a class="link-hover link" href={ templ.SafeURL(fmt.Sprintf("%s/s/%s", config.Config.WebAppConfig.Url, link.ShortCode)) } target="_blank">
						{ fmt.Sprintf("%s/s/%s", config.Config.WebAppConfig.Url, link.ShortCode) }
					</a>
				</p>
			</div>
		}
		<div class="flex justify-between gap-4 flex-wrap p-1 items-center mb-4">
			@LinkDetailsBodyNameDesc(link, linkId)
			@LinkDetailsActionButtons(link, isLoadingLink)
		</div>
		<div class="grid md:grid-cols-2 xl:grid-cols-4 gap-[1px] bg-base-content/10 overflow-x-clip">
			@LinkDetailsBodyLinks(link)
			@StatSection("link-details-stat-total-clicks", "Total Clicks", totalClicksStr, pathMonthText)
			@StatSection("link-details-stat-current-month-clicks", "Clicks This Month", currentMonthClicksStr, "")
			@StatSection("link-details-stat-created", "Created", timeAgoStr, fmt.Sprintf("Created on %s", link.CreatedAt.Format(utils.LayoutHuman)))
			@StatSection("link-details-stat-status", "Status", string(link.Status), "")
			<div class="grid lg:grid-cols-2 gap-[1px] col-span-full">
				@StatMonthlyClicksChartSection("link-details-stat-click-trend", linkId, "Clicks Trend", clicksSubText, monthlyClicks)
				@StatCountryClicksChartSection("link-details-stat-country-clicks", linkId, "Clicks by Country", "Top countries where the users who clicked on the link are from", countryClicks)
			</div>
		</div>
		@components.LinkModal(c, true)
		@components.DeleteLinkConfirmModal(c, true)
	}
}

templ LinkDetailsBodyNameDesc(link gormModels.Link, linkId string) {
	<div
		class="flex flex-col gap-0.5 flex-1"
		id="link-details-body-title"
		if link.ID =="" {
			data-on-load={ fmt.Sprintf("@get('/api/datastar/lazy/link-details/%s')", linkId) }
		}
	>
		if link.Name !="" {
			<h3 class="text-4xl display-font">{ link.Name }</h3>
			<h5 class="text-lg opacity-70">{ link.Description }</h5>
		} else {
			<div class="h-9 min-w-xs max-w-sm bg-base-content/10 rounded animate-pulse"></div>
		}
	</div>
}

templ LinkDetailsActionButtons(link gormModels.Link, isLoading bool) {
	<div class="flex justify-end gap-2" id="link-details-action-buttons">
		<button
			class={ "btn btn-outline", templ.KV("animate-pulse", isLoading) }
			data-on-click={ fmt.Sprintf("$linkModalOpen=true;$editLinkId='%s';$name='%s';$shortCode='%s';$url='%s';$description='%s'", link.ID, link.Name, link.ShortCode, link.LongURL, link.Description) }
			disabled?={  isLoading }
		>
			<span class="mb-0.5">
				@components.EditIcon()
			</span>
			Edit
		</button>
		<button
			class={ "btn btn-error btn-outline", templ.KV("animate-pulse", isLoading) }
			disabled?={  isLoading }
			data-on-click={ fmt.Sprintf("$deleteLinkId='%s'", link.ID) }
		>
			<span class="mb-0.5">
				@components.TrashIcon()
			</span>
			Delete
		</button>
	</div>
}

templ LinkDetailsBodyLinks(link gormModels.Link) {
	{{ shortUrl := "" }}
	if link.ShortCode!="" {
		{{ shortUrl = fmt.Sprintf("%s/s/%s", config.Config.WebAppConfig.Url, link.ShortCode) }}
	}
	<div class="grid lg:grid-cols-2 gap-[1px] col-span-full" id="link-details-body-links">
		@statLinkSection("link-details-stat-full-url", "Original URL", link.LongURL, "")
		@statLinkSection("link-details-stat-slug", "Short URL", shortUrl, "")
	</div>
}

templ StatSection(sectionId string, title, value, desc string) {
	@statSectionWrap(sectionId) {
		<div class={ templ.KV("opacity-40", value == "") }>{ title }</div>
		if value!="" {
			<div class="text-3xl line-clamp-1 font-bold break-all">{ value }</div>
			@statDesc(desc)
		} else {
			<div class="h-8 w-1/3 bg-base-content/10 rounded animate-pulse"></div>
			if desc !="" {
				<div class="h-4 w-1/2 bg-base-content/10 rounded animate-pulse mt-1"></div>
			}
		}
	}
}

templ statLinkSection(sectionId string, title, value, desc string) {
	@statSectionWrap(sectionId) {
		<div class={ templ.KV("opacity-40", value == "") }>{ title }</div>
		<div class="gap-2 flex items-center">
			if value != "" {
				<a class="text-lg line-clamp-1 break-all link-hover cursor-pointer hover:underline" href={ templ.SafeURL(value) } target="_blank">
					{ value }
				</a>
				<div class="tooltip" data-tip={ fmt.Sprintf("Copy %s to clipboard", title) }>
					<button class="btn btn-xs mb-1" data-on-click={ fmt.Sprintf("@clipboard('%s')", value) }>
						@components.CopyIcon()
					</button>
				</div>
			} else {
				<div class="h-6 flex-1 bg-base-content/10 animate-pulse rounded"></div>
				<div class="rounded-lg animate-pulse text-base-content/20">
					@components.CopyIcon()
				</div>
			}
		</div>
		@statDesc(desc)
	}
}

templ statChartWrap(sectionId string, title string, desc string, isLoading bool) {
	@statSectionWrap(sectionId) {
		<div class={ templ.KV("opacity-40", isLoading) }>{ title }</div>
		if !isLoading {
			@statDesc(desc)
		} else {
			<div class="h-4 w-1/2 bg-base-content/10 rounded animate-pulse mt-1"></div>
		}
		<div class="my-1 flex items-center justify-center min-h-[450px] h-full">
			{ children... }
			if isLoading {
				@components.ChartIcon(templ.Attributes{"height": "200", "width": "200", "stroke-width": "3", "class": "animate-pulse text-base-content/20"})
			}
		</div>
	}
}

templ statDesc(desc string) {
	if desc != "" {
		<div class="text-sm font-extralight line-clamp-1">{ desc } </div>
	}
}

templ statSectionWrap(sectionId string) {
	<div class="p-2 md:p-4 xl:p-6 bg-base-100" id={ sectionId }>
		{ children... }
	</div>
}

templ StatMonthlyClicksChartSection(sectionId string, linkId string, title string, desc string, monthlyClicks []gormModels.LinkMonthlyClicks) {
	@statChartWrap(sectionId, title, desc, monthlyClicks == nil) {
		if monthlyClicks!=nil {
			@chartEmptyWrap(len(monthlyClicks) == 0) {
				@chartCssWrap() {
					{{ maxClicks := getMaxMonthlyClicks(monthlyClicks) }}
					for _, item := range monthlyClicks {
						{{ monthTime := time.Date(item.Year, time.Month(item.Month), 1, 0, 0, 0, 0, time.UTC) }}
						<tr>
							<th scope="row">{ monthTime.Format("Jan") }</th>
							<td style={ templ.SafeCSS(fmt.Sprintf("--size: %.5f;", float32(item.Count)/float32(maxClicks))) } class="rounded-t">
								<span class="tooltip">{ fmt.Sprintf("%s %d",monthTime.Format("January"),item.Year) } <br/> { strconv.Itoa(item.Count) } Clicks </span>
							</td>
						</tr>
					}
				}
			}
		} else {
			<span data-on-load={ fmt.Sprintf("@get('/api/datastar/lazy/link-details/monthly-clicks/%s')", linkId) }></span>
		}
	}
}

templ StatCountryClicksChartSection(sectionId string, linkId string, title string, desc string, countryClicks []gormModels.LinkCountryClicks) {
	@statChartWrap(sectionId, title, desc, countryClicks == nil) {
		if countryClicks!=nil {
			@chartEmptyWrap(len(countryClicks) == 0) {
				@chartCssWrap() {
					{{ maxClicks := getMaxCountryClicks(countryClicks) }}
					for _, item := range countryClicks {
						{{ countryName := utils.CountryMap[strings.ToLower(item.CountryCode)] }}
						<tr>
							<th scope="row">{ strings.ToUpper(item.CountryCode) }</th>
							<td style={ templ.SafeCSS(fmt.Sprintf("--size: %.5f;", float32(item.Count)/float32(maxClicks))) } class="rounded-t">
								<span class="tooltip">{ countryName } <br/> { strconv.Itoa(item.Count) } Clicks </span>
							</td>
						</tr>
					}
				}
			}
		} else {
			<span data-on-load={ fmt.Sprintf("@get('/api/datastar/lazy/link-details/country-clicks/%s')", linkId) }></span>
		}
	}
}

func getMaxMonthlyClicks(monthlyClicks []gormModels.LinkMonthlyClicks) int {
	count := 0
	for _, item := range monthlyClicks {
		if item.Count > count {
			count = item.Count
		}
	}
	return count
}

func getMaxCountryClicks(countryClicks []gormModels.LinkCountryClicks) int {
	count := 0
	for _, item := range countryClicks {
		if item.Count > count {
			count = item.Count
		}
	}
	return count
}

templ chartCssWrap() {
	<div class="max-w-xs sm:max-w-sm md:max-w-md lg:max-w-full flex items-center justify-center flex-1 pt-5">
		<table class="charts-css column hide-da data-start show-labels show-primary-axis show-data-axes show-6-secondary-axes data-spacing-2">
			<tbody class="min-h-[430px]">
				{ children... }
			</tbody>
		</table>
	</div>
}

templ chartEmptyWrap(isEmpty bool) {
	if isEmpty {
		<div>
			@components.ChartIcon(templ.Attributes{"height": "200", "width": "200", "stroke-width": "3", "class": "opacity-30"})
			<div class="font-light opacity-40 text-center">No data yet</div>
		</div>
	} else {
		{ children... }
	}
}
