package pages

import (
	"context"
	"fmt"
	"github.com/dustin/go-humanize"
	"github.com/go-echarts/go-echarts/v2/charts"
	"github.com/go-echarts/go-echarts/v2/opts"
	"github.com/go-echarts/go-echarts/v2/types"
	gormModels "github.com/kaje94/slek-link/gorm/pkg"
	"github.com/kaje94/slek-link/webapp/internal/components"
	"github.com/kaje94/slek-link/webapp/internal/config"
	"github.com/kaje94/slek-link/webapp/internal/utils"
	"github.com/labstack/echo/v4"
	"io"
	"net/http"
	"slices"
	"strconv"
	"time"
)

func createBarChart(countryClicks []gormModels.LinkCountryClicks) *charts.Bar {
	bar := charts.NewBar()
	bar.SetGlobalOptions(
		charts.WithLegendOpts(opts.Legend{Show: opts.Bool(false)}),
		charts.WithGridOpts(opts.Grid{Show: opts.Bool(false)}),
		charts.WithInitializationOpts(opts.Initialization{Width: "100%", Theme: types.ThemeWonderland}))

	countryCodes := []string{}
	clicks := []opts.BarData{}
	for _, item := range countryClicks {
		countryCodes = append(countryCodes, item.CountryCode)
		clicks = append(clicks, opts.BarData{Value: item.Count, Name: item.CountryName})
	}

	bar.SetXAxis(countryCodes)
	bar.AddSeries("Clicks", clicks)
	return bar
}

func createClicksTrendChart(monthlyClicks []gormModels.LinkMonthlyClicks) *charts.Line {
	lineChart := charts.NewLine()

	slices.Reverse(monthlyClicks)
	lineChart.SetGlobalOptions(
		charts.WithLegendOpts(opts.Legend{Show: opts.Bool(false)}),
		charts.WithGridOpts(opts.Grid{Show: opts.Bool(false)}),
		charts.WithInitializationOpts(opts.Initialization{Width: "100%", Theme: types.ThemeWonderland}))
	items := make([]opts.LineData, 0)
	months := make([]string, 0)

	for _, item := range monthlyClicks {
		items = append(items, opts.LineData{Value: item.Count})
		months = append(months, time.Month(item.Month).String())
	}

	lineChart.SetXAxis(months).
		AddSeries("Clicks", items).
		SetSeriesOptions(charts.WithLineChartOpts(opts.LineChart{Smooth: opts.Bool(true)}))

	return lineChart
}

// The charts all have a `Render(w io.Writer) error` method on them.
// That method is very similar to templ's Render method.
type Renderable interface {
	Render(w io.Writer) error
}

func ConvertChartToTemplComponent(chart Renderable) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) error {
		return chart.Render(w)
	})
}

func HandleLinkDetailsPage(c echo.Context) error {
	userInfo, err := utils.GetUserFromCtxWithRedirect(c)
	if err != nil {
		return err
	}

	id := c.Param("id")
	if id == "" {
		return echo.NewHTTPError(http.StatusBadRequest, "Id is required")
	}

	db, err := utils.GetDbFromCtx(c)
	if err != nil {
		return err
	}

	compat, err := utils.GetValkeyFromCtx(c)
	if err != nil {
		return err
	}

	link, err := utils.GetLinkOfUser(compat, db, userInfo.ID, id)
	if err != nil {
		return echo.NewHTTPError(http.StatusInternalServerError, "Failed to find link")
	}

	if link.ID == "" {
		return c.Redirect(http.StatusTemporaryRedirect, "/404")
	}

	monthlyClicks, err := utils.GetLinksMonthlyClicks(compat, db, link.ID)
	if err != nil {
		return err
	}

	totalClicks := 0
	var currentMonth gormModels.LinkMonthlyClicks
	for _, item := range monthlyClicks {
		if item.Month == int(time.Now().Month()) && item.Year == time.Now().Year() {
			currentMonth = item
			break
		}
	}
	for _, item := range monthlyClicks {
		totalClicks += item.Count
	}

	humanizedMonthlyCount := humanize.Comma(int64(currentMonth.Count))
	humanizedTotalCount := humanize.Comma(int64(totalClicks))

	var clicksTrendChart *charts.Line
	if len(monthlyClicks) > 0 {
		clicksTrendChart = createClicksTrendChart(monthlyClicks)
	}

	countryClicks, err := utils.GetCountryClicks(compat, db, link.ID)
	if err != nil {
		return err
	}

	var countryClicksChart *charts.Bar
	if len(countryClicks) > 0 {
		countryClicksChart = createBarChart(countryClicks)
	}

	isNewLinkStr := c.QueryParam("isNewLink")
	isNewLink, _ := strconv.ParseBool(isNewLinkStr)

	resp := components.RootLayout(
		"Link Details | slek.link - Track and Analyze Your Link's Performance",
		"Dive into detailed analytics for your shortened link on slek.link. Monitor clicks, track user behavior, and gain insights to optimize your link's performance.",
		linkDetailsBodyContent(c, link, humanizedMonthlyCount, humanizedTotalCount, isNewLink, clicksTrendChart, countryClicksChart),
	)
	c.Response().Header().Set(echo.HeaderContentType, echo.MIMETextHTML)
	return resp.Render(c.Request().Context(), c.Response().Writer)
}

templ linkDetailsBodyContent(c echo.Context, link gormModels.Link, monthlyCount string, totalCount string, showNewLinkBanner bool, clicksTrendChart *charts.Line, countryClicksChart *charts.Bar) {
	@components.LayoutWithSignals(c, "{ linkModalOpen:false, linkModalError:'', mutating: false, editLinkId:'', deleteLinkId: '', name: '', shortCode:'', url:'', description:'' }") {
		@components.BreadCrumb([]components.BreadcrumbItem{
			components.BreadcrumbItem{Label: "Home", Link: "/"},
			components.BreadcrumbItem{Label: "Dashboard", Link: "/dashboard"},
			components.BreadcrumbItem{Label: "Link Details", Link: ""},
		})
		if showNewLinkBanner {
			<div role="alert" class="alert alert-success">
				@components.InfoIcon()
				<p>
					Your link has been shortened. To share, use:
					<a class="link-hover link" href={ templ.SafeURL(fmt.Sprintf("%s/s/%s", config.Config.WebAppConfig.Url, link.ShortCode)) } target="_blank">
						{ fmt.Sprintf("%s/s/%s", config.Config.WebAppConfig.Url, link.ShortCode) }
					</a>
				</p>
			</div>
		}
		<div class="flex justify-between gap-4 flex-wrap p-1 items-center mb-4">
			@LinkDetailsBodyNameDesc(link)
			<div class="flex justify-end gap-2">
				<button
					class="btn btn-outline"
					data-on-click={ fmt.Sprintf("$linkModalOpen=true;$editLinkId='%s';$name='%s';$shortCode='%s';$url='%s';$description='%s'", link.ID, link.Name, link.ShortCode, link.LongURL, link.Description) }
				>
					<span class="mb-0.5">
						@components.EditIcon()
					</span>
					Edit
				</button>
				<button class="btn btn-error btn-outline" data-on-click={ fmt.Sprintf("$deleteLinkId='%s'", link.ID) }>
					<span class="mb-0.5">
						@components.TrashIcon()
					</span>
					Delete
				</button>
			</div>
		</div>
		<div class="grid md:grid-cols-2 xl:grid-cols-4 gap-[1px] bg-base-content/10">
			@LinkDetailsBodyLinks(link)
			@statSection("Total Clicks", totalCount, "Past 12 months")
			@statSection("Clicks This Month", monthlyCount, "")
			@statSection("Created", humanize.Time(link.CreatedAt), fmt.Sprintf("Created on %s", link.CreatedAt.Format(utils.LayoutHuman)))
			@statSection("Status", string(link.Status), "")
			if clicksTrendChart!=nil || countryClicksChart!=nil {
				<div class="grid lg:grid-cols-2 gap-[1px] col-span-full">
					if clicksTrendChart!=nil {
						@statChartSection("Clicks Trend", "Clicks over the past 12 months", ConvertChartToTemplComponent(clicksTrendChart))
					}
					if countryClicksChart!=nil {
						@statChartSection("Clicks by Country", "Top countries where the users who clicked on the link are from", ConvertChartToTemplComponent(countryClicksChart))
					}
				</div>
			}
		</div>
		@components.LinkModal(c, true)
		@components.DeleteLinkConfirmModal(c, true)
	}
}

templ LinkDetailsBodyNameDesc(link gormModels.Link) {
	<div class="flex flex-col gap-0.5 flex-1" id={ fmt.Sprintf("link-details-body-title-%s", link.ID) }>
		<h3 class="text-4xl display-font">{ link.Name }</h3>
		<h5 class="text-lg opacity-70">{ link.Description }</h5>
	</div>
}

templ LinkDetailsBodyLinks(link gormModels.Link) {
	<div class="grid lg:grid-cols-2 gap-[1px] col-span-full" id={ fmt.Sprintf("link-details-body-links-%s", link.ID) }>
		@statLinkSection("Original URL", link.LongURL, "")
		@statLinkSection("Short URL", fmt.Sprintf("%s/s/%s", config.Config.WebAppConfig.Url, link.ShortCode), "")
	</div>
}

templ statSection(title, value, desc string) {
	@statSectionWrap() {
		<div>{ title }</div>
		<div class="text-3xl line-clamp-1 font-bold break-all">{ value }</div>
		@statDesc(desc)
	}
}

templ statLinkSection(title, value, desc string) {
	@statSectionWrap() {
		<div>{ title }</div>
		<div class="gap-2 flex items-center">
			<a class="text-lg line-clamp-1 break-all link-hover cursor-pointer hover:underline" href={ templ.SafeURL(value) } target="_blank">
				{ value }
			</a>
			<button class="btn btn-xs mb-1" data-on-click={ fmt.Sprintf("@clipboard('%s')", value) }>
				@components.CopyIcon()
			</button>
		</div>
		@statDesc(desc)
	}
}

templ statChartSection(title string, desc string, chartComp templ.Component) {
	@statSectionWrap() {
		<div>{ title }</div>
		@statDesc(desc)
		<div class="my-1 flex items-center justify-center min-h-[400px] h-full">
			@chartComp
		</div>
	}
}

templ statDesc(desc string) {
	if desc != "" {
		<div class="text-sm font-extralight line-clamp-1">{ desc } </div>
	}
}

templ statSectionWrap() {
	<div class="p-2 md:p-4 xl:p-6 bg-base-100">
		{ children... }
	</div>
}
