package pages

import (
	"net/http"
	"sync/atomic"

	"github.com/Jeffail/gabs/v2"
	"github.com/gorilla/sessions"
	"github.com/kaje94/slek-link/internal/components"
	"github.com/labstack/echo/v4"
	datastar "github.com/starfederation/datastar/sdk/go"
)

////// TODO: update templ docs
// https://templ.guide/server-side-rendering/datastar
// REMOVE this pge after testing

type TemplCounterSignals struct {
	Global uint32 `json:"global"`
	User   uint32 `json:"user"`
}

templ templCounterExampleButtons() {
	<div class="flex justify-around gap-4">
		<button
			class="btn btn-info"
			data-on-click={ datastar.PostSSE("/templ_counter/increment/global") }
		>
			Increment Global
		</button>
		<button
			class="btn btn-success"
			data-on-click={ datastar.PostSSE("/templ_counter/increment/user") }
		>
			Increment User
		</button>
	</div>
}

templ templCounterExampleCounts() {
	<div class="flex justify-around gap-4">
		<div class="flex flex-col items-center gap-1">
			<div class="text-lg font-bold">Global</div>
			<div class="text-2xl" data-text="global.value"></div>
		</div>
		<div class="flex flex-col items-center gap-1">
			<div class="text-lg font-bold">User</div>
			<div class="text-2xl" data-text="user.value"></div>
		</div>
	</div>
}

templ templCounterExampleInitialContents(signals TemplCounterSignals) {
	<div
		id="container"
		data-signals={ templ.JSONString(signals) }
		class="flex flex-col gap-4"
	>
		@templCounterExampleButtons()
		@templCounterExampleCounts()
	</div>
}

func SetupExamplesTemplCounter(examplesRouter echo.Router, sessionStore sessions.Store) error {
	var globalCounter atomic.Uint32
	const (
		sessionKey = "templ_counter"
		countKey   = "count"
	)

	userVal := func(r *http.Request) (uint32, *sessions.Session, error) {
		sess, err := sessionStore.Get(r, sessionKey)
		if err != nil {
			return 0, nil, err
		}

		val, ok := sess.Values[countKey].(uint32)
		if !ok {
			val = 0
		}
		return val, sess, nil
	}

	examplesRouter.Add("GET", "/templ_counter/data", func(c echo.Context) error {
		userVal, _, err := userVal(c.Request())
		if err != nil {
			http.Error(c.Response().Writer, err.Error(), http.StatusInternalServerError)
		}

		signals := TemplCounterSignals{
			Global: globalCounter.Load(),
			User:   userVal,
		}

		c.Response().Header().Set(echo.HeaderContentType, echo.MIMETextHTML)

		comp := components.RootLayout(
			"Contact Us | slek.link - Get Support or Ask Questions",
			"Need help? Contact the slek.link support team for inquiries, assistance, or feedback. We're here to make your URL shortening experience seamless.",
			templCounterExampleInitialContents(signals),
		)
		return comp.Render(c.Request().Context(), c.Response().Writer)
	})

	updateGlobal := func(store *gabs.Container) {
		store.Set(globalCounter.Add(1), "global")
	}

	examplesRouter.Add("POST", "/templ_counter/increment/global", func(c echo.Context) error {
		update := gabs.New()
		updateGlobal(update)

		sse := datastar.NewSSE(c.Response().Writer, c.Request())
		sse.MergeSignals(update.Bytes())
		return nil
	})

	examplesRouter.Add("POST", "/templ_counter/increment/user", func(c echo.Context) error {
		val, sess, err := userVal(c.Request())
		if err != nil {
			http.Error(c.Response().Writer, err.Error(), http.StatusInternalServerError)
		}

		val++
		sess.Values[countKey] = val
		if err := sess.Save(c.Request(), c.Response().Writer); err != nil {
			http.Error(c.Response().Writer, err.Error(), http.StatusInternalServerError)
		}

		update := gabs.New()
		updateGlobal(update)
		update.Set(val, "user")

		sse := datastar.NewSSE(c.Response().Writer, c.Request())
		sse.MergeSignals(update.Bytes())
		return nil
	})

	return nil
}
